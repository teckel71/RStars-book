# Introducci√≥n.

## R y R-Studio. Comienzo: Proyectos.

Abriremos R-Studio pulsando en el icono correspondiente. Aparecer√° la siguiente ventana:

![[IDE de RStudio.]{.smallcaps}](figuras/Imagen1_01.png){width="700"}

La parte izquierda de la ventana es la **consola**. La consola es la secci√≥n de RStudio donde podemos manejar R mediante la introducci√≥n de c√≥digo. Por ejemplo, podemos escribir `2+2` despu√©s del cursor (signo "\>"), y pulsar Enter. La propia consola nos devolver√° el valor 4:

```{r,eval=TRUE, echo=TRUE}
2+2
```

De todos modos, la forma m√°s eficiente de trabajar es mediante "proyectos" y "scripts".

Un **proyecto** b√°sicamente viene asociado a la carpeta donde R trabajar√°, buscando los datos que sean sus "inputs", y, en su caso, enviando sus resultados u "outputs". Para crear un nuevo proyecto, seguiremos la instrucci√≥n `File ‚Üí New Project`, luego se nos preguntar√° si se crea el proyecto en una nueva carpeta o en una ya existente. Vamos a crearlo, por ejemplo, en el disco extra√≠ble D, carpeta R, subcarpeta "explora", que ya est√° creada. Nos saldr√° una ventana para buscar la carpeta y, cuando la encontremos, pulsaremos `Open` y `Create Project`. Ya tendremos creado nuestro proyecto. Si nos vamos al explorador de Windows¬Æ, y buscamos la carpeta "explora", encontraremos que en tal carpeta aparece un archivo de nombre "explora", con un icono de un cubo con una "R". Ese archivo lo que est√° haciendo es actuar como un "faro" que le dice a R que, cuando trabajemos en el proyecto "explora", todos los archivos de datos necesarios estar√°n en esa carpeta (tambi√©n llamada "explora", porque el proyecto adopta el nombre de la carpeta donde lo localizamos). Y que, si nuestro trabajo aporta alg√∫n fichero de "output", tambi√©n se depositar√° en esa carpeta del proyecto.

En futuras sesiones, si queremos trabajar en el mismo proyecto, en lugar de seguir la ruta `File ‚Üí New Project`, tendremos que hacer `File ‚Üí Open Project`.

## Scripts.

En cuanto a los **scripts**, son programas o rutinas donde varias instrucciones se ejecutan secuencialmente. Para crear un script, se seguir√° la ruta Fi`le ‚Üí New File ‚Üí R Script`. Y si el script lo guardamos, ¬ød√≥nde lo har√°? Pues en la carpeta "explora", que es la del proyecto en el que estamos trabajando.

Inform√°ticamente, un script es simplemente un archivo de texto plano. Se puede modificar con cualquier editor de texto. Afortunadamente, para no estar entrando y saliendo de R-Studio, esta interfaz incorpora un **editor** de scripts, lo cual es muy c√≥modo.

Vemos como ahora, a la izquierda de R-Studio, ha aparecido, en la parte superior, una nueva ventana, pasando la consola a ocupar la parte inferior. Es la ventana del "editor":

![[El editor de Scripts de RStudio.]{.smallcaps}](figuras/Imagen1_02.png){width="700"}

Igual que con los proyectos, podemos crear desde R-Studio un script nuevo, o abrir uno preexistente; y modificarlo, ejecutarlo, o volverlo a guardar.

Vamos a comenzar a escribir nuestro script. Si queremos hacer un comentario que no ejecute ninguna instrucci√≥n, √©ste ir√° precedido del s√≠mbolo almohadilla o *hashtag* "\#". Luego, vamos a ordenar a R que haga la operaci√≥n de suma: 2+2. Escribimos, por tanto, en el editor:

```{r, eval=FALSE, echo=TRUE}
#Ejemplo de Script
2+2  #este script hace una simple suma.
```

Si pulsamos `Control + May√∫sculas + ENTER` o al desplegable de `Source ‚Üí Source with Echo`, se ejecutar√° el script (para ejecutar solo la l√≠nea donde est√° el cursor, pulsaremos `Control + ENTER` o el bot√≥n de `Run`; y para ejecutar varias l√≠neas, hemos de sombrearlas y pulsar `Control + ENTER` o el bot√≥n de `Run`). En la consola aparecer√°:

```{r, eval=TRUE, echo=FALSE}
#Ejemplo de Script
2+2  #este script hace una simple suma.
```

Podemos guardar el script con `File ‚Üí Save As‚Ä¶` ¬øD√≥nde se guardar√° por defecto? Pues en la carpeta "explora", que es la de nuestro proyecto. Una vez nuestro script ya tiene nombre, podemos ir guard√°ndolo de vez en cuando pulsando simplemente en el bot√≥n del "disquete" del editor. Vamos a llamarlo, por ejemplo, "explorando". Si vamos, en el explorador de Windows¬Æ, a nuestra carpeta de proyecto, veremos que hay un archivo de texto llamado "explorando" con extensi√≥n ".R" (explorando.R). Este script lo podremos ejecutar cuantas veces queramos sin tener que escribir nada, o reescribirlo si vemos que no funciona o que necesitamos hacer modificaciones. Esa es la ventaja de trabajar con scripts.

Para recuperar un script en una nueva sesi√≥n de trabajo simplemente tenemos que seguir las instrucciones `File ‚Üí Open File‚Ä¶` y seleccionarlo.

## Paquetes (packages).

R es un lenguaje de programaci√≥n en torno al cual se ha desarrollado una cantidad casi inimaginable de recursos: funciones, bases de datos, utilidades... Tal es la cantidad de recursos, que no ser√≠a operativo abrir R (directamente, o a trav√©s de una IDE, como R-Studio) y tener inmediatamente todos esos recursos activos y preparados para ser utilizados. Adem√°s, R deber√≠a ser actualizado de un modo casi constante.

Por todo ello, todos los recursos disponibles est√°n organizados mediante "paquetes" ("packages" en ingl√©s). Un **paquete** es una colecci√≥n de funciones y/o un conjunto de datos desarrollados por la comunidad de R. Estos incrementan el potencial de R ampliando sus capacidades b√°sicas, o a√±adiendo otras nuevas.

De hecho, cuando abrimos R, algunos de estos paquetes, que se han instalado junto al propio lenguaje, se activan. Pero solo algunos. Un ejemplo es el paquete `{base}` o el paquete `{stats}` [@R-base].

La mayor parte de los paquetes disponibles no forman parte, por "defecto", en la misma instalaci√≥n de R. Se encuentran en diversos servidores llamados repositorios. El m√°s importante, es [CRAN](https://cran.r-project.org/), que es el "repositorio oficial" y que alberga m√°s de 10.000 paquetes. Pero existen otros repositorios, a destacar, por ejemplo, GitHub.

Para **instalar** un paquete en nuestra m√°quina que est√© albergado en CRAN, un modo sencillo es, dentro de R-Studio, pulsar en la ventana inferior / izquierda sobre la pesta√±a "Packages", y sobre el bot√≥n "Install". Emerger√° entonces una ventana donde hay un campo para escribir el nombre del paquete (al comenzar a escribirlo, el propio R-Studio te sugerir√° los paquetes disponibles). Esto equivale a usar (bien directamente en la consola, o bien como l√≠nea de c√≥digo insertada en un script) la instrucci√≥n `install.packages()`, con el nombre del paquete entre comillas (si son varios, pues ir√°n separados por comas.

Una vez se tiene instalado el paquete, ya no habr√° que volver a instalarlo para utilizarlo; sino **activarlo**. De hecho, todos los paquetes que no se encuentran por defecto en la propia instalaci√≥n de R, deben ser activados para poder usar sus funcionalidades y/o datos. Para hacerlo, se debe utilizar la instrucci√≥n `library()`, y el nombre del paquete dentro del par√©ntesis.

Del nombre de esta instrucci√≥n surge la confusi√≥n com√∫n de tomar como sin√≥nimos las palabras "paquete" y "librer√≠a" en el entorno de R. Si nos referimos a estas colecciones de funcionalidades y/o datos; lo correcto es "paquete", ya que "librer√≠a" tiene m√°s que ver con la organizaci√≥n inform√°tica de un software.

## Help! (sistema de ayuda).

A veces podemos albergar dudas sobre la correcta utilizaci√≥n de las funcionalidades y herramientas que nos proporciona un paquete. Hay varias fuentes de ayuda para intentar encontrar respuesta a las cuestiones que se nos plantean.

Una opci√≥n, para obtener informaci√≥n general sobre un paquete, es utilizar la funci√≥n `help()`, con el argumento "package". Por ejemplo:

```{r, eval=TRUE, echo=TRUE}
help(package="base")
```

Observaremos como en la ventana inferior / izquierda de R-Studio nos saldr√° la informaci√≥n correspondiente. De hecho, en tal ventana existe una pesta√±a **"Help"** para obtener la ayuda sin teclear c√≥digo.

Adem√°s, cada funci√≥n puede ser consultada individualmente mediante `help("nombre de la funci√≥n")` o `help(function, package = "package")` si el paquete no ha sido cargado. Estas instrucciones nos mostrar√°n la descripci√≥n de la funci√≥n y sus argumentos acompa√±ados de ejemplos de utilizaci√≥n. Por ejemplo:

```{r, eval=FALSE, echo=TRUE}
help("rm", package="base")
```

La instrucci√≥n anterior nos aporta la documentaci√≥n sobre la funci√≥n `rm()` del paquete `{base}` de R (nota: este paquete se activa por defecto al abrir R o R-Studio; por lo que el segundo argumento, con el nombre del paquete que contiene la instrucci√≥n no es necesario).

Otra opci√≥n para mostrar informaci√≥n de ayuda es la exploraci√≥n de las "vi√±etas" (vignettes). Las **vi√±etas** son documentos que muestran de un modo m√°s detallado las funcionalidades de un paquete. La informaci√≥n de las vi√±etas de un paquete est√°n disponibles en el archivo "documentation". Puede obtenerse una lista de las vi√±etas de nuestros paquetes instalados con la funci√≥n `browseVignettes()`. Si solo queremos consultar las vi√±etas de un paquete concreto pasaremos como argumento a la funci√≥n el nombre del mismo: `browseVignettes(package = "packagename")`. En ambos casos, una ventana del navegador se abrir√° para que podamos f√°cilmente explorar el documento.

Si optamos por permanecer en la consola, la instrucci√≥n `vignette()` nos mostrar√° una lista de vi√±etas, `vignette(package = "packagename")` las vi√±etas incluidas en el paquete, y una vez identificada la vi√±eta de inter√©s podremos consultarla mediante `vignette("vignettename")`.

üòâ
